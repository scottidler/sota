#!/usr/bin/sota

main = ()

    dict1 = { 'a': 1, 'b': 2, 'c': 3 }

    # normal accessor; one match on key results in one value
    3 == dict1['c'] # <-- is true 

    # list of accessors in brackets; creates a subset tuple of values based upon the keys found
    (1, 2) == dict1['a', 'b'] # <-- is true

    # list of accessors in braces; creates a subset dictionary based upon the keys found
    { 'a': 1, 'b': 2 } == dict1{'a', 'b'} # <-- is true



    # inverse on dict with unique values; just works
    { 1: 'a', 2: 'b' } == { 'a': 1, 'b': 2 }.inverse()

    # inverse on dict with repeated values requires an option otherwise an error
    { 1: ['a', 'b'] } == { 'a': 1, 'b': 1 }.inverse(allow_duplicates=true)

    # the opposite is also possible with the same flag
    { 'a': 1, 'b': 1 } == { 1: ['a', 'b'] }.inverse(allow_duplicates=true)
